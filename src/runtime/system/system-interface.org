#+TITLE: System Interface implementation for translators
#+AUTHOR: VLEAD
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  System Interface is the glue between the =rest= and =system=.  The world of
  =rest= uses =json= and the world of =system= uses objects. System Interface
  allows these two worlds to talk to each other.

* The =System Interface= class

** Constructor
#+NAME: class_system_interface
#+BEGIN_SRC python
class SystemInterface():

    # Should not create an instance of system interface
    def __init__(self):
        pass

#+END_SRC
   
** Methods
*** create_experiment
+ There are three =staticmethods= in SytemInterface class. First one is =create_experiment=. 
+ The method interacts with =System= package and get =user= and =organisation= by the details provided in =Config=. 
+ After that, it checks for the existence of the repository given as input to the API.
+ If repo already exists, that repo is updated using =update_experiment= method, described in the second part.
+ Else, it will create a git version controlled repository in =github= and will create files with the directory structure as specified in sections of the experiment.
+ =makefile= and =init.sh= files are shell scripts which are suppose to build the experiment.
+ =README.org= contains steps to develop the experiment.
+ =/src= directory is created which contains org files for each section(specification) and inside that it has =simulation= directory which is supposed to contain files for simulation in experiment.
#+NAME: create_experiment
#+BEGIN_SRC python
    @staticmethod
    def create_experiment(experiment_dict, content_type):
        user = System.get_user()
        org = System.get_org(user)
        repo_name = experiment_dict['name'].lower().replace(" ", "-") + "-" + experiment_dict['id']
        repo = System.get_repo(org, repo_name)
        if repo is not None:
            SystemInterface.update_experiment(experiment_dict, content_type, repo)
        else:
            System.create_repo(org, repo_name)
            repo = System.get_repo(org, repo_name)
            # add makefile here
            # check makefile contents
            System.create_file(repo, "makefile", "", Config.MAKEFILE)
            System.create_file(repo, "init.sh", "", Config.INIT)
            System.create_file(repo, "README.org", "", "* Overview\n+ " + experiment_dict['overview'] + Config.README)
            # add the specification file
            # System.create_file(repo, "simulation-" + experiment_dict['id'] + "." + content_type, "/src/simulation")
            for section in experiment_dict['sections']:
                System.create_file(repo, section.lower().replace(" ", "-") + "-" + experiment_dict['id'] + "." + content_type, "/src/"+section.lower().replace(" ", "-") + "-" + experiment_dict['id'])

#+END_SRC
*** update_experiment
+ Second one is =update_experiment=. 
+ It is called by =create_experiment= when the repo already exists.
+ The method extracts sections(specifications) and compare it with the existing sections(specifications).
+ Those who are new gets added, existing which are present in new specification remains intact and rest are deleted.

#+NAME: update_experiment
#+BEGIN_SRC python
    @staticmethod
    def update_experiment(experiment_dict, content_type, repo):
        filenames_spec = experiment_dict['sections']
        for i in range(len(filenames_spec)):
            filenames_spec[i] = filenames_spec[i].lower().replace(" ", "-") + "-" + experiment_dict['id'] + "." + content_type 
        files = System.get_file(repo, '/src')
        filenames_repo = []
        for f in files:
            if f.name != "simulation":
                filenames_repo.append(f.name)
        add = []
        for filename_spec in filenames_spec:
            if filename_spec not in filenames_repo:
                add.append(filename_spec)
        delete = []
        for filename_repo in filenames_repo:
            if filename_repo not in filenames_spec:
                delete.append(filename_repo)
        for section in add:
            System.create_file(repo, section, "/src")
        for section in delete:
            sha = repo.get_contents("/src/"+section).sha
            System.delete_file(repo, section, "/src", sha)
#+END_SRC

*** create_openedx_lab
+ Third one is =create_openedx_lab=. 
+ It creates a gzip file which can be directly imported in openedx.
#+NAME: create_openedx_lab
#+BEGIN_SRC python
    @staticmethod
    def create_openedx_lab(labname, data_json):
        # Should be modified if the name can't be unique
        filename = Config.LABSPEC
        
        System.gen_lab_dir(labname)
        System.gen_json_file(data_json, Config.LABPATH + "/" + labname + "/" + filename)
        System.execute_python(Config.OPENEDX_SCRIPT, [os.path.abspath(Config.LABPATH+"/"+labname)])
        System.pack_lab(labname)
        System.del_lab_dir(labname)

#+END_SRC

** Imports
#+NAME: imports_system_interface
#+BEGIN_SRC python
from runtime.system.system import System
from runtime.config.config import Config
import os

#+END_SRC


* Tangle :boilerplate:
#+BEGIN_SRC python :tangle system_interface.py :eval no :noweb yes
<<imports_system_interface>>
<<class_system_interface>>
<<create_experiment>>
<<update_experiment>>
<<create_openedx_lab>>
#+END_SRC
