#+TITLE: System Interface implementation for translators
#+AUTHOR: VLEAD
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  System Interface is the glue between the =rest= and =system=.  The world of
  =rest= uses =json= and the world of =system= uses objects. System Interface
  allows these two worlds to talk to each other.

* The =System Interface= class

** Constructor
#+NAME: class_system_interface
#+BEGIN_SRC python
class SystemInterface():

    # Should not create an instance of system interface
    def __init__(self):
        pass

#+END_SRC

** Methods

#+NAME: methods_system_interface
#+BEGIN_SRC python
    @staticmethod
    def create_experiment(experiment_dict, content_type):
        user = System.get_user()
        org = System.get_org(user)
        repo_name = experiment_dict['name'].replace(" ", "-") + "-" + experiment_dict['id']
        System.create_repo(org, repo_name)
        repo = System.get_repo(org, repo_name)
        # add makefile here
        # check makefile contents
        System.create_file(repo, "README.org", "", "* Overview\n" + experiment_dict['overview'] + "\n* Warning\nDo not create resource on the content server for a new file. Use the API =/update_experiment=.")
        # add the specification file
        for section in experiment_dict['sections']:
            System.create_file(repo, section.lower().replace(" ", "-") + "-" + experiment_dict['id'] + "." + content_type, "/src")
    
    @staticmethod
    def update_experiment(experiment_dict, content_type):
        user = System.get_user()
        org = System.get_org(user)
        repo_name = experiment_dict['name'].replace(" ", "-") + "-" + experiment_dict['id']
        repo = System.get_repo(org, repo_name)
        filenames_spec = experiment_dict['sections']
        for i in range(len(filenames_spec)):
            filenames_spec[i] = filenames_spec[i].lower().replace(" ", "-") + "-" + experiment_dict['id'] + "." + content_type 
        files = System.get_file(repo, '/src')
        filenames_repo = []
        for file in files:
            filenames_repo.append(file.name)
        add = []
        for filename_spec in filenames_spec:
            if filename_spec not in filenames_repo:
                add.append(filename_spec)
        delete = []
        for filename_repo in filenames_repo:
            if filename_repo not in filenames_spec:
                delete.append(filename_repo)
        for section in add:
            System.create_file(repo, section, "/src")
        for section in delete:
            sha = repo.get_contents("/src/"+section).sha
            System.delete_file(repo, section, "/src", sha)

    @staticmethod
    def create_openedx_lab(labname, data_json):
        # Should be modified if the name can't be unique
        filename = Config.LABSPEC
        
        System.gen_lab_dir(labname)
        System.gen_json_file(data_json, Config.LABPATH + "/" + labname + "/" + filename)
        System.execute_python(Config.OPENEDX_SCRIPT, [os.path.abspath(Config.LABPATH+"/"+labname)])
        System.pack_lab(labname)
        System.del_lab_dir(labname)

#+END_SRC

** Imports
#+NAME: imports_system_interface
#+BEGIN_SRC python
from runtime.system.system import System
from runtime.config.config import Config
import os

#+END_SRC


* Tangle :boilerplate:
#+BEGIN_SRC python :tangle system_interface.py :eval no :noweb yes
<<imports_system_interface>>
<<class_system_interface>>
<<methods_system_interface>>
#+END_SRC
