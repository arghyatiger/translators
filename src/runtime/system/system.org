#+TITLE: Translators System
#+AUTHOR: VLEAD
#+DATE: [2016-06-07 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* The =System= class
  There is only one =System= in the application. This =System= interacts with
  the Github API and generates the experiment structure on the remote server.

** Constructor
   The system cannot be initialized.

#+NAME: class_system
#+BEGIN_SRC python
class System():

    # use exceptions to raise error
    # "cannot initialise error"
    def __init__(self):
        pass

#+END_SRC

** Methods
   These methods are used to create the experiments and labs. The versioning of
   an experiment is done using the Github API and the configuration parameters
   specified in the [[../config/config.org][=Configuration=]] of the application. The packaged lab
   structure is generated using the structure generator for open edX module and the
   corresponding configuration parameters.

*** get_user
+ Returns the user based on the personal access token from Config.
#+BEGIN_SRC python
    @staticmethod
    def get_user():
        return Github(Config.USER_KEY).get_user()

#+END_SRC

*** get_org
+ Returns the org based on the ORG-ID from Config.
#+BEGIN_SRC python
    @staticmethod
    def get_org(user):
        for org in user.get_orgs():
            if org.id == Config.ORG_ID:
                return org

#+END_SRC

*** create_repo
+ Creates repo in the org.
#+BEGIN_SRC python
    @staticmethod
    def create_repo(org, name):
        org.create_repo(name)

#+END_SRC

*** get_repo
+ Returns the repo with specified name in the org.
#+BEGIN_SRC python
    @staticmethod
    def get_repo(org, name):
        for repo in org.get_repos():
            if repo.name == name:
                return repo

#+END_SRC

*** get_file
+ Returns the files in the given path.
#+BEGIN_SRC python
    @staticmethod
    def get_file(repo, path):
        return repo.get_contents(path)

#+END_SRC

*** create_file
+ Creates file in the repo with specified name and the path.
#+BEGIN_SRC python
    @staticmethod
    def create_file(repo, new_file, path, content = None):
        file_path = path + "/" + new_file
        if content is None:
            content = "This is the " + new_file + " file"
        repo.create_file(file_path, new_file + " file", content)

#+END_SRC

*** delete_file
+ Deletes the file with specified path.
#+BEGIN_SRC python
    @staticmethod
    def delete_file(repo, file, path, sha):
        file_path = path + "/" + file
        repo.delete_file(file_path, "delete " + file, sha)

#+END_SRC

*** gen_json_file
#+BEGIN_SRC python
    @staticmethod
    def gen_json_file(json_dump, filename):
        # The file created is temporary ?
        with open(filename, 'w+') as fp:
            json.dump(json_dump, fp)

#+END_SRC

*** gen_lab_dir
#+BEGIN_SRC python
    @staticmethod
    def gen_lab_dir(labname):
        os.mkdir(Config.LABPATH+"/"+labname)

#+END_SRC

*** del_lab_dir
#+BEGIN_SRC python
    @staticmethod
    def del_lab_dir(labname):
        rmtree(Config.LABPATH+"/"+labname)

#+END_SRC

*** pack_lab
#+BEGIN_SRC python
    @staticmethod
    def pack_lab(labname):
        command = "tar -czf "
        command += Config.LABPATH + "/" + labname + ".tar.gz "
        command += Config.LABPATH + "/" + labname
        os.system(command)
    
#+END_SRC

*** execute_python
#+BEGIN_SRC python
    @staticmethod
    def execute_python(script, args):
        command = "python " + script
        for a in args:
            command += " " + a
        os.system(command)

#+END_SRC
** Imports
   The system requires access to the os library
#+NAME: imports_system
#+BEGIN_SRC python
from runtime.config.config import Config

from github import Github
import os, json
from shutil import rmtree

#+END_SRC

* Tangle                                                        :boilerplate:
#+BEGIN_SRC python :tangle system.py :eval no :noweb yes
<<imports_system>>
<<class_system>>
<<methods_system>>
#+END_SRC
